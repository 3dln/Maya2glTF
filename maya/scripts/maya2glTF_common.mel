global proc maya2glTF_exportProgressUI(int $max) {
    // This is defined on maya startup
    global string $gMainProgressBar;  

    $max = max(1, $max);

    progressBar -edit
        -beginProgress
        -isInterruptable true
        -status "maya2glTF: exporting..."
        -minValue 0
        -maxValue $max
        $gMainProgressBar;
}

// Returns -1 if abortion is requested
global proc int maya2glTF_advanceExportProgressUI(string $stepName) 
{
    global string $gMainProgressBar;  // This is defined on maya startup

    progressBar -edit -step 1 -status ("maya2glTF: " + $stepName + "...") $gMainProgressBar;

    if(`progressBar -query -isCancelled $gMainProgressBar`) {
        print ("maya2glTF: aborting at "+`date -time`+"\n");
        return -1;
    }

    return 0;
}

global proc maya2glTF_polySelectAndFrame() 
{
    // clear the selection    
    select -cl;

    // gather the display layers
    string $layers[] = `ls -type displayLayer`;

    string $objects[] = {};

    // if we don't find any layers, select by visibility
    if (size($layers) == 0) 
    {
        print "Maya2glTF: No display layers found, just selecting visible objects\n";
        $objects = `ls -v -type mesh -ap`; 
    } 
    else 
    {
        print "Maya2glTF: Using display layers to select visible untemplated objects\n";

        for ($layer in $layers)
        {
            // if the display layer is visible, continue
            if (getAttr($layer+".displayType") != 1 && getAttr($layer+".visibility"))
            {
                // gather the items that are connected to the layer
                string $conns[] = `listConnections -d 1 -s 0 ($layer+".drawInfo")`;

                // as this gives us transform nodes, 
                // do a selection on the result of that running through the dag, 
                // selecting all the meshes that are set to visible
                string $shapes[] = `ls -dag -type mesh -visible $conns`;
                
                if (size($shapes) > 0) 
                {
                    appendStringArray($objects, $shapes, size($shapes));
                }
            }
        }
    }

    // Sort the objects for consistency
    $objects = sort($objects);

    // print ("Selecting:\n" + stringArrayToString($objects, "\n") + "\n");

    select -r $objects;

    if (catch (`viewFit -an 1`)) {
        warning "Failed to fit viewport to selection";
    }
}

